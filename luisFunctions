from juanFunctions import *
from generalFunctions import *

def show_borrowed_books(library):
    """Display all books that are currently borrowed"""
    borrowed_books = [book for book in library if book['status'] == 'Borrowed']
    if not borrowed_books:
        print(RED + "No books are currently borrowed." + RESET)
        return
    
    print("\n=== BORROWED BOOKS ===")
    print(f"{'ID':<5} {'TITLE':<30} {'AUTHOR':<20} {'BORROWER':<20} {'LOAN DATE':<12}")
    print("-" * 87)
    
    for book in borrowed_books:
        print(f"{book['id']:<5} {book['title'][:28]:<30} {book['author'][:18]:<20} "
              f"{book['loan']['name']:<20} {book['loan']['date']:<12}")

def return_book(library):
    """Process the return of a borrowed book"""
    print("\n=== RETURN A BOOK ===")
    
    # Show only borrowed books
    borrowed_books = [book for book in library if book['status'] == 'Borrowed']
    if not borrowed_books:
        print(RED + "No books are currently borrowed." + RESET)
        return False
    
    print("\nCurrently borrowed books:")
    show_borrowed_books(library)
    
    try:
        book_id = validate_integer_range("Book ID", 1, 9999)
        if book_id is None:
            return False
    except ValueError:
        print(RED + "Error: ID must be a number." + RESET)
        return False
    
    # Find the book
    book = next((b for b in library if b['id'] == book_id), None)
    
    if not book:
        print(RED + f"Error: No book exists with ID {book_id}." + RESET)
        return False
    
    if book['status'] != 'Borrowed':
        print(RED + f"Error: The book '{book['title']}' is not currently borrowed." + RESET)
        return False
    
    # Return the book
    book['status'] = 'Available'
    borrower = book['loan']['name']
    if 'loan' in book:
        del book['loan']
    
    print(GREEN + f"Book '{book['title']}' has been successfully returned by {borrower}." + RESET)
    return True

def delete_book(library):
    """Delete a book from the library system"""
    print("\n=== DELETE A BOOK ===")
    
    if not library:
        print(RED + "The library is empty. No books to delete." + RESET)
        return False
    
    Show_books()
    
    try:
        book_id = validate_integer_range("Book ID to delete", 1, 9999)
        if book_id is None:
            return False
    except ValueError:
        print(RED + "Error: ID must be a number." + RESET)
        return False
    
    # Find the book
    book_idx = next((idx for idx, b in enumerate(library) if b['id'] == book_id), None)
    
    if book_idx is None:
        print(RED + f"Error: No book exists with ID {book_id}." + RESET)
        return False
    
    book = library[book_idx]
    
    if book['status'] == 'Borrowed':
        print(RED + f"Error: Cannot delete book '{book['title']}' because it is currently borrowed." + RESET)
        return False
    
    # Confirm deletion
    confirm = try_again("Are you sure you want to delete this book? (y/n): ", "Please enter 'y' for yes or 'n' for no.")
    if not confirm:
        print(YELLOW + "Deletion cancelled." + RESET)
        return False
    
    # Delete the book
    deleted_book = library.pop(book_idx)
    print(GREEN + f"Book '{deleted_book['title']}' has been successfully deleted." + RESET)
    return True
